{%- if type is extension('vectorType') %}
     CALL xml_addNewLine(xp)
     DO i = 1, obj%size, 5
        CALL xml_AddCharacters(xp, obj%{{ type|type_name }}(i:MIN(i+5-1,obj%size)), fmt='s16')
        CALL xml_AddNewLine(xp)
     END DO
{%- elif type is extension('integerVectorType') %}
     CALL xml_addNewLine(xp)
     DO i = 1, obj%size, 8
        CALL xml_AddCharacters(xp, obj%{{ type|type_name }}(i:MIN(i+8-1, obj%size)))
        CALL xml_AddNewLine(xp)
     END DO
{%- elif type is extension('matrixType') %}
       CALL xml_addNewLine(xp)
        DO i = 1, obj%dims(2)
           CALL xml_AddCharacters(xp, obj%{{ type|type_name }}((i-1)*obj%dims(1)+1: i*obj%dims(1)), fmt ='s16')
           CALL xml_addNewLine(xp)
        END DO
 {%- elif type is extension('integerMatrixType') %}
        CALL xml_addNewLine(xp)
        DO i = 1, obj%dims(2)
           CALL xml_AddCharacters(xp, obj%{{ type|type_name }}((i-1)*obj%dims(1)+1: i*obj%dims(1)) )
           CALL xml_addNewLine(xp)
        END DO
 {%- elif type is extension('xs:string') %}
        CALL xml_AddCharacters(xp, TRIM(obj%{{ type|type_name }}))
 {%- elif type is extension('xs:double') %}
        CALL xml_AddCharacters(xp, obj%{{ type|type_name }}, fmt='s16')
 {%- else %}
    {%- if type.is_extension() %}
        {%- if 'CHARACTER' in ( type.base_type|fortran_type ) %}
        CALL xml_AddCharacters(xp, TRIM(obj%{{ type|type_name }}))
        {%- elif 'REAL' in ( type.base_type|fortran_type ) %}
        CALL xml_AddCharacters(xp, obj%{{ type|type_name }}, fmt='s16')
        {%- else %}
        CALL xml_AddCharacters(xp, obj%{{ type|type_name }})
        {%- endif %}
    {%- else %}
        CALL xml_AddCharacters(xp, obj%{{ type|type_name }})
    {%- endif %}
 {%- endif %}
