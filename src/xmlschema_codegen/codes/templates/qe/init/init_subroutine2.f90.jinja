  !
  SUBROUTINE qes_init_{{ type.local_name.replace('Type', '') }}({{ type|init_argument_line }})
    !
    IMPLICIT NONE
    !
    TYPE({{ type|type_name }}), INTENT(OUT) :: obj
    CHARACTER(LEN=*), INTENT(IN) :: tagname
{%- if type.is_complex() %}
{%- for attribute in type.attributes.values() %}
  {%- if attribute.is_required %}
    {{ attribute|init_fortran_type_name }}, INTENT(IN) :: {{attribute.name}}
  {%- else %}
    {{ attribute|init_fortran_type_name }}, OPTIONAL, INTENT(IN) :: {{attribute.name}}
  {%- endif %}
{%- endfor %}
{%- endif  %}
{%- if type.is_extension() %}
    {{ type|init_extension_fortran_type }}, INTENT(IN) :: {{ type.name.replace('Type','')}}
{%- endif %}
{%- for element in type.sequence %}
  {%- if element.is_qes_type %} 
    {%- if element.xsd_type.is_simple() %}
    {{ element.xsd_type|init_fortran_type_name }},{{element.is_optional()}}{{ element|dimension }}INTENT(IN) :: {{element.local_name}}
    {%- else %}
    TYPE({{ element.xsd_type|init_fortran_type_name }}),{{element.is_optional()}}{{ element|dimension }}INTENT(IN) :: {{element.local_name}}
    {%- endif %}
  {%- else %}
    {{ element|init_fortran_type_name }},{{element.is_optional()}}{{element|dimension}}INTENT(IN) :: {{element.local_name}}
  {%- endif %}
{%- endfor %}
    !
    obj%tagname = TRIM(tagname) 
    obj%lwrite = .TRUE.
    obj%lread = .TRUE.
{%- if type.is_complex() %}
{%- for attribute in type.attributes.values() %}
  {%- if attribute.is_required %}
    obj%{{attribute.local_name}} = {{attribute.local_name}}
  {%- else %}
    IF (PRESENT({{ attribute.name }})) THEN
      obj%{{attribute.local_name}}_ispresent = .TRUE.
      obj%{{attribute.local_name}} = {{attribute.local_name}}
    ELSE 
      obj%{{attribute.local_name}}_ispresent = .FALSE.
    END IF  
  {%- endif %}
{%- endfor %}
{%- endif %}
    !
{%- if type.is_extension() %}
    obj%{{type.name.replace('Type', '')}} = {{ type.name.replace('Type','')}}
{%- endif %}
{%- if not type.has_simple_content() %}
{%- for element in type.content_type.iter_elements() %}
  {%- if element.is_emptiable() %}
    IF ( PRESENT({{element.local_name}})) THEN
      obj%{{element.local_name}}_ispresent = .TRUE.
    {%- if element.is_multiple() %}
      ALLOCATE(obj%{{element.local_name}}(SIZE({{element.local_name}})))
      obj%ndim_{{element.local_name}} = SIZE({{element.local_name}})
    {%- endif %} 
      obj%{{element.local_name}} = {{element.local_name}}
    ELSE 
      obj%{{element.local_name}}_ispresent = .FALSE.
    END IF 
  {%- else %}
    {%- if element.is_multiple() %}
    ALLOCATE( obj%{{element.local_name}}(SIZE({{element.local_name}})))
    obj%ndim_{{element.local_name}} = SIZE({{element.local_name}})
    {%- endif %}
    obj%{{element.local_name}} = {{element.local_name}}
  {%- endif %}
{%- endfor %}
{%- endif %}
    !
  END SUBROUTINE {{ type|init_function_name }}
  !